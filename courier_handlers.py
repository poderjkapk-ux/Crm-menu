# courier_handlers.py

import logging
from aiogram import Dispatcher, F, html, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, or_
from sqlalchemy.orm import joinedload
from typing import Dict, Any
from urllib.parse import quote_plus

from models import Employee, Order, OrderStatus, Settings, OrderStatusHistory, Table, Role
from notification_manager import notify_all_parties_on_status_change
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑ admin_handlers
from admin_handlers import _display_edit_items_menu

logger = logging.getLogger(__name__)

class StaffAuthStates(StatesGroup):
    waiting_for_phone = State()

def get_staff_login_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üîê –í—Ö—ñ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É"))
    return builder.as_markup(resize_keyboard=True)

def get_dynamic_staff_keyboard(employee: Employee):
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª–µ–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞."""
    builder = ReplyKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—Ä–∞–≤
    if employee.role.can_serve_tables:
        builder.add(KeyboardButton(text="üçΩ –ú–æ—ó —Å—Ç–æ–ª–∏–∫–∏"))
    if employee.role.can_be_assigned:
        builder.add(KeyboardButton(text="üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    
    # –†–æ–∑–º—ñ—â—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–∞—Ö –ø–æ –¥–≤—ñ
    builder.adjust(2)

    if employee.is_on_shift:
        builder.row(KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É"))
    else:
        builder.row(KeyboardButton(text="üü¢ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É"))
    
    builder.row(KeyboardButton(text="üö™ –í–∏–π—Ç–∏"))
    return builder.as_markup(resize_keyboard=True)


async def show_courier_orders(message_or_callback: Message | CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
    user_id = message_or_callback.from_user.id
    message = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == user_id))
    
    if not employee:
         return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    final_statuses_res = await session.execute(
        select(OrderStatus.id).where(or_(OrderStatus.is_completed_status == True, OrderStatus.is_cancelled_status == True))
    )
    final_status_ids = final_statuses_res.scalars().all()

    orders_res = await session.execute(
        select(Order).options(joinedload(Order.status)).where(
            Order.courier_id == employee.id,
            Order.status_id.not_in(final_status_ids)
        ).order_by(Order.id.desc())
    )
    orders = orders_res.scalars().all()

    text = "üöö <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:</b>\n\n"
    if not employee.is_on_shift:
         text += "üî¥ –í–∏ –Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üü¢ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É', —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n"
    if not orders:
        text += "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."
    
    kb = InlineKeyboardBuilder()
    if orders:
        for order in orders:
            status_name = order.status.name if order.status else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            address_info = order.address if order.is_delivery else '–°–∞–º–æ–≤–∏–≤—ñ–∑'
            text += (f"<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b> ({status_name})\n"
                     f"üìç –ê–¥—Ä–µ—Å–∞: {html.quote(address_info)}\n"
                     f"üí∞ –°—É–º–∞: {order.total_price} –≥—Ä–Ω\n\n")
            kb.row(InlineKeyboardButton(text=f"–ö–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º #{order.id}", callback_data=f"courier_view_order_{order.id}"))
        kb.adjust(1)
    
    try:
        if isinstance(message_or_callback, CallbackQuery):
            await message.edit_text(text, reply_markup=kb.as_markup())
            await message_or_callback.answer()
        else:
            await message.answer(text, reply_markup=kb.as_markup())
    except TelegramBadRequest as e:
         if "message is not modified" in str(e):
             await message_or_callback.answer("–î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è.")
         else:
             logger.error(f"Error in show_courier_orders: {e}")
             await message.answer(text, reply_markup=kb.as_markup())

async def show_waiter_tables(message_or_callback: Message | CallbackQuery, session: AsyncSession):
    is_callback = isinstance(message_or_callback, CallbackQuery)
    message = message_or_callback.message if is_callback else message_or_callback
    
    employee = await session.scalar(
        select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.assigned_tables))
    )
    if not employee:
        return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    if not employee.is_on_shift:
        return await message.answer("üî¥ –í–∏ –Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑–º—ñ–Ω—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤–æ—ó —Å—Ç–æ–ª–∏–∫–∏.")

    tables = employee.assigned_tables
    
    text = "üçΩ <b>–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω—ñ –∑–∞ –≤–∞–º–∏ —Å—Ç–æ–ª–∏–∫–∏:</b>\n\n"
    kb = InlineKeyboardBuilder()
    if not tables:
        text += "–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞."
    else:
        for table in sorted(tables, key=lambda t: t.name):
            kb.add(InlineKeyboardButton(text=f"–°—Ç–æ–ª–∏–∫: {html.escape(table.name)}", callback_data=f"waiter_view_table_{table.id}"))
    kb.adjust(2)
    
    if is_callback:
        await message.edit_text(text, reply_markup=kb.as_markup())
    else:
        await message.answer(text, reply_markup=kb.as_markup())

async def start_handler(message: Message, state: FSMContext, session: AsyncSession, **kwargs: Dict[str, Any]):
    await state.clear()
    employee = await session.scalar(
        select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
    )
    if employee:
        keyboard = get_dynamic_staff_keyboard(employee)
        await message.answer(f"üéâ –í—ñ—Ç–∞—é, {employee.full_name}! –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.", reply_markup=keyboard)
    else:
        await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.",
                             reply_markup=get_staff_login_keyboard())


def register_courier_handlers(dp_admin: Dispatcher):
    dp_admin.message.register(start_handler, CommandStart())

    @dp_admin.message(F.text == "üîê –í—Ö—ñ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É")
    async def staff_login_start(message: Message, state: FSMContext, session: AsyncSession):
        user_id = message.from_user.id
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == user_id))
        if employee:
            return await message.answer(f"‚úÖ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–π–¥—ñ—Ç—å —ñ–∑ —Å–∏—Å—Ç–µ–º–∏.", 
                                        reply_markup=get_dynamic_staff_keyboard(employee))
            
        await state.set_state(StaffAuthStates.waiting_for_phone)
        kb = InlineKeyboardBuilder().add(InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_auth")).as_markup()
        await message.answer(f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", reply_markup=kb)

    @dp_admin.message(StaffAuthStates.waiting_for_phone)
    async def process_staff_phone(message: Message, state: FSMContext, session: AsyncSession):
        phone = message.text.strip()
        
        employee = await session.scalar(select(Employee).options(joinedload(Employee.role)).where(Employee.phone_number == phone))
        
        if employee:
            employee.telegram_user_id = message.from_user.id
            await session.commit()
            await state.clear()
            
            keyboard = get_dynamic_staff_keyboard(employee)
            await message.answer(f"üéâ –í—ñ—Ç–∞—é, {employee.full_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.", reply_markup=keyboard)
        else:
            await message.answer(f"‚ùå –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    @dp_admin.callback_query(F.data == "cancel_auth")
    async def cancel_auth(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        try:
             await callback.message.edit_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        except Exception:
             await callback.message.delete()
             await callback.message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_staff_login_keyboard())
    
    @dp_admin.message(F.text.in_({"üü¢ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É", "üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É"}))
    async def toggle_shift(message: Message, session: AsyncSession):
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
        )
        if not employee: return
        is_start = message.text.startswith("üü¢")
        if employee.is_on_shift == is_start:
            await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤–∂–µ {'–Ω–∞ –∑–º—ñ–Ω—ñ' if is_start else '–Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ'}.")
            return

        employee.is_on_shift = is_start
        await session.commit()
        
        action = "–ø–æ—á–∞–ª–∏" if is_start else "–∑–∞–≤–µ—Ä—à–∏–ª–∏"
        keyboard = get_dynamic_staff_keyboard(employee)
        await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ {action} –∑–º—ñ–Ω—É.", reply_markup=keyboard)


    @dp_admin.message(F.text == "üö™ –í–∏–π—Ç–∏")
    async def logout_handler(message: Message, session: AsyncSession):
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role)))
        if employee:
            employee.telegram_user_id = None
            employee.is_on_shift = False
            # –ó–Ω—ñ–º–∞—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ —Å—Ç–æ–ª–∏–∫—ñ–≤ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
            employee.current_order_id = None
            if employee.role.can_serve_tables:
                tables_to_unassign_res = await session.execute(select(Table).where(Table.assigned_waiters.any(id=employee.id)))
                for table in tables_to_unassign_res.scalars().all():
                    table.assigned_waiters.remove(employee)

            await session.commit()
            await message.answer("üëã –í–∏ –≤–∏–π—à–ª–∏ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏.", reply_markup=get_staff_login_keyboard())
        else:
            await message.answer("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")

    @dp_admin.message(F.text.in_({"üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üçΩ –ú–æ—ó —Å—Ç–æ–ª–∏–∫–∏"}))
    async def handle_show_items_by_role(message: Message, session: AsyncSession, **kwargs: Dict[str, Any]):
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
        )
        if not employee: return await message.answer("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")

        if message.text == "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" and employee.role.can_be_assigned:
            await show_courier_orders(message, session)
        elif message.text == "üçΩ –ú–æ—ó —Å—Ç–æ–ª–∏–∫–∏" and employee.role.can_serve_tables:
            await show_waiter_tables(message, session)
        else:
            await message.answer("‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ.")

    @dp_admin.callback_query(F.data.startswith("courier_view_order_"))
    async def courier_view_order_details(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        order_id = int(callback.data.split("_")[3])
        order = await session.get(Order, order_id)
        if not order: return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        status_name = order.status.name if order.status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        address_info = order.address if order.is_delivery else '–°–∞–º–æ–≤—ã–≤–æ–∑'
        text = (f"<b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_name}\n"
                f"–ê–¥—Ä–µ—Å–∞: {html.quote(address_info)}\n"
                f"–ö–ª—ñ—î–Ω—Ç: {html.quote(order.customer_name)}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(order.phone_number)}\n"
                f"–°–∫–ª–∞–¥: {html.quote(order.products)}\n"
                f"–°—É–º–∞: {order.total_price} –≥—Ä–Ω\n\n")
        
        kb = InlineKeyboardBuilder()
        statuses_res = await session.execute(
            select(OrderStatus).where(OrderStatus.visible_to_courier == True).order_by(OrderStatus.id)
        )
        courier_statuses = statuses_res.scalars().all()
        
        status_buttons = [
            InlineKeyboardButton(text=status.name, callback_data=f"staff_set_status_{order.id}_{status.id}")
            for status in courier_statuses
        ]
        kb.row(*status_buttons)

        if order.is_delivery and order.address:
            encoded_address = quote_plus(order.address)
            map_query = f"https://maps.google.com/maps?q={encoded_address}"
            kb.row(InlineKeyboardButton(text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ", url=map_query))

        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–æ—ó—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="show_courier_orders_list"))
        await callback.message.edit_text(text, reply_markup=kb.as_markup())
        await callback.answer()

    @dp_admin.callback_query(F.data == "show_courier_orders_list")
    async def back_to_list(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        await show_courier_orders(callback, session)

    @dp_admin.callback_query(F.data.startswith("staff_set_status_"))
    async def staff_set_status(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        client_bot = dp_admin.get("client_bot")
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == callback.from_user.id).options(joinedload(Employee.role)))
        actor_info = f"{employee.role.name}: {employee.full_name}" if employee else f"–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ (ID: {callback.from_user.id})"
        
        order_id, new_status_id = map(int, callback.data.split("_")[3:])
        
        order = await session.get(Order, order_id, options=[joinedload(Order.table)])
        if not order: return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        
        new_status = await session.get(OrderStatus, new_status_id)
        if not new_status: return await callback.answer(f"–ü–æ–º–∏–ª–∫–∞: –°—Ç–∞—Ç—É—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        old_status_name = order.status.name if order.status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        order.status_id = new_status.id
        alert_text = f"–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ: {new_status.name}"

        if new_status.is_completed_status or new_status.is_cancelled_status:
            if employee and employee.current_order_id == order_id:
                employee.current_order_id = None
            if new_status.is_completed_status and order.courier_id:
                order.completed_by_courier_id = order.courier_id

        session.add(OrderStatusHistory(order_id=order.id, status_id=new_status.id, actor_info=actor_info))
        await session.commit()
        
        await notify_all_parties_on_status_change(
            order=order, old_status_name=old_status_name, actor_info=actor_info,
            admin_bot=callback.bot, client_bot=client_bot, session=session
        )
        await callback.answer(alert_text)
        
        # --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É ---
        if order.order_type == "in_house":
             # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π callback, —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ table_id
            fake_callback_data = f"waiter_view_table_{order.table_id}"
            callback.data = fake_callback_data
            await show_waiter_table_orders(callback, session)
        else:
            await show_courier_orders(callback, session)
            
    # --- –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –û–§–Ü–¶–Ü–ê–ù–¢–ê ---
    @dp_admin.callback_query(F.data.startswith("waiter_view_table_"))
    async def show_waiter_table_orders(callback: CallbackQuery, session: AsyncSession):
        table_id = int(callback.data.split("_")[-1])
        table = await session.get(Table, table_id)
        if not table:
            return await callback.answer("–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)

        final_statuses_res = await session.execute(select(OrderStatus.id).where(or_(OrderStatus.is_completed_status == True, OrderStatus.is_cancelled_status == True)))
        final_status_ids = final_statuses_res.scalars().all()
        
        active_orders_res = await session.execute(
            select(Order)
            .where(Order.table_id == table_id, Order.status_id.not_in(final_status_ids))
            .options(joinedload(Order.status))
            .order_by(Order.id.desc())
        )
        active_orders = active_orders_res.scalars().all()
        
        text = f"<b>–°—Ç–æ–ª–∏–∫: {html.escape(table.name)}</b>\n\n–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        kb = InlineKeyboardBuilder()
        if not active_orders:
            text += "\n<i>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.</i>"
        else:
            for order in active_orders:
                kb.row(InlineKeyboardButton(
                    text=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} ({order.status.name}) - {order.total_price} –≥—Ä–Ω",
                    callback_data=f"waiter_view_order_{order.id}"
                ))
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É —Å—Ç–æ–ª–∏–∫—ñ–≤", callback_data="back_to_tables_list"))
        
        await callback.message.edit_text(text, reply_markup=kb.as_markup())

    @dp_admin.callback_query(F.data == "back_to_tables_list")
    async def back_to_waiter_tables(callback: CallbackQuery, session: AsyncSession):
        await show_waiter_tables(callback, session)
        
    @dp_admin.callback_query(F.data.startswith("waiter_view_order_"))
    async def waiter_view_order_details(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[-1])
        order = await session.get(Order, order_id, options=[joinedload(Order.status), joinedload(Order.table)])
        if not order:
            return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)

        text = (f"<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} (–°—Ç–æ–ª–∏–∫: {order.table.name})</b>\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.status.name}\n\n"
                f"<b>–°–∫–ª–∞–¥:</b>\n- {html.quote(order.products).replace(', ', '\n- ')}\n\n"
                f"<b>–°—É–º–∞:</b> {order.total_price} –≥—Ä–Ω")
        
        statuses_res = await session.execute(select(OrderStatus).where(OrderStatus.visible_to_waiter == True).order_by(OrderStatus.id))
        statuses = statuses_res.scalars().all()

        kb = InlineKeyboardBuilder()
        status_buttons = [
            InlineKeyboardButton(text=s.name, callback_data=f"staff_set_status_{order.id}_{s.id}")
            for s in statuses
        ]
        # --- –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ ---
        kb.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥", callback_data=f"edit_items_{order.id}"))
        
        for i in range(0, len(status_buttons), 2):
            kb.row(*status_buttons[i:i+2])
        
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–æ–ª–∏–∫–∞", callback_data=f"waiter_view_table_{order.table_id}"))

        await callback.message.edit_text(text, reply_markup=kb.as_markup())

    # --- –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
    @dp_admin.callback_query(F.data.startswith("edit_items_"))
    async def waiter_edit_order_items(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[2])
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == callback.from_user.id).options(joinedload(Employee.role)))
        order = await session.get(Order, order_id)
        
        if employee and order and (employee.role.can_serve_tables or employee.role.can_manage_orders) and order.order_type == 'in_house':
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ "–∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è" –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–æ–º
            await _display_edit_items_menu(
                bot=callback.bot,
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                order_id=order_id,
                session=session,
                back_callback=f"waiter_view_order_{order_id}" # –ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            )
        # –Ø–∫—â–æ —Ü–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä, –≤—ñ–Ω –ø–æ—Ç—Ä–∞–ø–∏—Ç—å —É —Å–≤—ñ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        # –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç—Ä–µ–±–∞ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏/–∑–º—ñ–Ω–∏—Ç–∏ –≤ admin_handlers.py
