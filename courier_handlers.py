# courier_handlers.py

import logging
from aiogram import Dispatcher, F, html, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, or_
from sqlalchemy.orm import joinedload
from typing import Dict, Any
from urllib.parse import quote_plus

from models import Employee, Order, OrderStatus, Settings, OrderStatusHistory, Table
from notification_manager import notify_all_parties_on_status_change

logger = logging.getLogger(__name__)

class StaffAuthStates(StatesGroup):
    waiting_for_phone = State()

def get_staff_login_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üîê –í—Ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"))
    builder.row(KeyboardButton(text="üöö –í—Ö–æ–¥ –∫—É—Ä—å–µ—Ä–∞"))
    builder.row(KeyboardButton(text="ü§µ –í—Ö–æ–¥ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"))
    return builder.as_markup(resize_keyboard=True)

def get_courier_keyboard(is_on_shift: bool):
    builder = ReplyKeyboardBuilder()
    if is_on_shift:
        builder.row(KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
        builder.row(KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"))
    else:
        builder.row(KeyboardButton(text="üü¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"))
    builder.row(KeyboardButton(text="üö™ –í—ã–π—Ç–∏"))
    return builder.as_markup(resize_keyboard=True)

def get_operator_keyboard(is_on_shift: bool):
    builder = ReplyKeyboardBuilder()
    if is_on_shift:
        builder.row(KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"))
    else:
        builder.row(KeyboardButton(text="üü¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"))
    builder.row(KeyboardButton(text="üö™ –í—ã–π—Ç–∏"))
    return builder.as_markup(resize_keyboard=True)

def get_waiter_keyboard(is_on_shift: bool):
    builder = ReplyKeyboardBuilder()
    if is_on_shift:
        builder.row(KeyboardButton(text="üçΩ –ú–æ–∏ —Å—Ç–æ–ª–∏–∫–∏"))
        builder.row(KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"))
    else:
        builder.row(KeyboardButton(text="üü¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"))
    builder.row(KeyboardButton(text="üö™ –í—ã–π—Ç–∏"))
    return builder.as_markup(resize_keyboard=True)


async def show_courier_orders(message_or_callback: Message | CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
    user_id = message_or_callback.from_user.id
    message = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == user_id).options(joinedload(Employee.role)))
    
    if not employee or not employee.role.can_be_assigned:
         return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∫—É—Ä—å–µ—Ä–∞.")

    final_statuses_res = await session.execute(
        select(OrderStatus.id).where(or_(OrderStatus.is_completed_status == True, OrderStatus.is_cancelled_status == True))
    )
    final_status_ids = final_statuses_res.scalars().all()

    orders_res = await session.execute(
        select(Order).options(joinedload(Order.status)).where(
            Order.courier_id == employee.id,
            Order.status_id.not_in(final_status_ids)
        ).order_by(Order.id.desc())
    )
    orders = orders_res.scalars().all()

    text = "üöö <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    if not employee.is_on_shift:
         text += "üî¥ –í—ã –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ. –ù–∞–∂–º–∏—Ç–µ 'üü¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.\n\n"
    if not orders:
        text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º."
    
    kb = InlineKeyboardBuilder()
    if orders:
        for order in orders:
            status_name = order.status.name if order.status else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            address_info = order.address if order.is_delivery else '–°–∞–º–æ–≤—ã–≤–æ–∑'
            text += (f"<b>–ó–∞–∫–∞–∑ #{order.id}</b> ({status_name})\n"
                     f"üìç –ê–¥—Ä–µ—Å: {html.quote(address_info)}\n"
                     f"üí∞ –°—É–º–º–∞: {order.total_price} –≥—Ä–Ω\n\n")
            kb.row(InlineKeyboardButton(text=f"–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É #{order.id}", callback_data=f"courier_view_order_{order.id}"))
        kb.adjust(1)
    
    try:
        if isinstance(message_or_callback, CallbackQuery):
            await message.edit_text(text, reply_markup=kb.as_markup())
            await message_or_callback.answer()
        else:
            await message.answer(text, reply_markup=kb.as_markup())
    except TelegramBadRequest as e:
         if "message is not modified" in str(e):
             await message_or_callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.")
         else:
             logger.error(f"Error in show_courier_orders: {e}")
             await message.answer(text, reply_markup=kb.as_markup())

async def show_waiter_tables(message_or_callback: Message | CallbackQuery, session: AsyncSession):
    is_callback = isinstance(message_or_callback, CallbackQuery)
    message = message_or_callback.message if is_callback else message_or_callback
    
    employee = await session.scalar(
        select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
    )
    if not employee or not employee.role.can_serve_tables:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.")

    if not employee.is_on_shift:
        return await message.answer("üî¥ –í—ã –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Å—Ç–æ–ª–∏–∫–∏.")

    tables_res = await session.execute(
        select(Table).where(Table.assigned_waiter_id == employee.id).order_by(Table.name)
    )
    tables = tables_res.scalars().all()

    text = "üçΩ <b>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∑–∞ –≤–∞–º–∏ —Å—Ç–æ–ª–∏–∫–∏:</b>\n\n"
    kb = InlineKeyboardBuilder()
    if not tables:
        text += "–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞."
    else:
        for table in tables:
            kb.add(InlineKeyboardButton(text=f"–°—Ç–æ–ª–∏–∫: {html.escape(table.name)}", callback_data=f"waiter_view_table_{table.id}"))
    kb.adjust(1)
    
    if is_callback:
        await message.edit_text(text, reply_markup=kb.as_markup())
    else:
        await message.answer(text, reply_markup=kb.as_markup())

async def start_handler(message: Message, state: FSMContext, session: AsyncSession, **kwargs: Dict[str, Any]):
    await state.clear()
    employee = await session.scalar(
        select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
    )
    if employee:
        if employee.role.can_be_assigned:
            await message.answer(f"üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee.full_name}! –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∫—É—Ä—å–µ—Ä–∞.",
                                 reply_markup=get_courier_keyboard(employee.is_on_shift))
        elif employee.role.can_manage_orders:
            await message.answer(f"üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee.full_name}! –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
                                 reply_markup=get_operator_keyboard(employee.is_on_shift))
        elif employee.role.can_serve_tables:
            await message.answer(f"üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee.full_name}! –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.",
                                 reply_markup=get_waiter_keyboard(employee.is_on_shift))
        else:
            await message.answer("–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –Ω–æ –≤–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.",
                             reply_markup=get_staff_login_keyboard())


def register_courier_handlers(dp_admin: Dispatcher):
    dp_admin.message.register(start_handler, CommandStart())

    @dp_admin.message(F.text.in_({"üöö –í—Ö–æ–¥ –∫—É—Ä—å–µ—Ä–∞", "üîê –í—Ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "ü§µ –í—Ö–æ–¥ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"}))
    async def staff_login_start(message: Message, state: FSMContext, session: AsyncSession):
        user_id = message.from_user.id
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == user_id).options(joinedload(Employee.role))
        )
        if employee:
            return await message.answer(f"‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {employee.role.name}. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", 
                                        reply_markup=get_staff_login_keyboard())
        
        role_type = "unknown"
        if "–∫—É—Ä—å–µ—Ä–∞" in message.text: role_type = "courier"
        elif "–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" in message.text: role_type = "operator"
        elif "–æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞" in message.text: role_type = "waiter"
            
        await state.set_state(StaffAuthStates.waiting_for_phone)
        await state.update_data(role_type=role_type)
        kb = InlineKeyboardBuilder().add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_auth")).as_markup()
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏ **{role_type}**:", reply_markup=kb)

    @dp_admin.message(StaffAuthStates.waiting_for_phone)
    async def process_staff_phone(message: Message, state: FSMContext, session: AsyncSession):
        phone = message.text.strip()
        data = await state.get_data()
        role_type = data.get("role_type")
        
        employee = await session.scalar(select(Employee).options(joinedload(Employee.role)).where(Employee.phone_number == phone))
        
        role_checks = {
            "courier": lambda e: e and e.role.can_be_assigned,
            "operator": lambda e: e and e.role.can_manage_orders,
            "waiter": lambda e: e and e.role.can_serve_tables,
        }
        
        if role_checks.get(role_type, lambda e: False)(employee):
            employee.telegram_user_id = message.from_user.id
            await session.commit()
            await state.clear()
            
            keyboard_getters = {
                "courier": get_courier_keyboard,
                "operator": get_operator_keyboard,
                "waiter": get_waiter_keyboard,
            }
            keyboard = keyboard_getters[role_type](employee.is_on_shift)
            
            await message.answer(f"üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee.full_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {employee.role.name}.", reply_markup=keyboard)
        else:
            await message.answer(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–ª–∏ '{role_type}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    @dp_admin.callback_query(F.data == "cancel_auth")
    async def cancel_auth(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        try:
             await callback.message.edit_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception:
             await callback.message.delete()
             await callback.message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_staff_login_keyboard())
    
    @dp_admin.message(F.text.in_({"üü¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", "üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"}))
    async def toggle_shift(message: Message, session: AsyncSession):
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
        )
        if not employee: return
        is_start = message.text.startswith("üü¢")
        if employee.is_on_shift == is_start:
            await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å —É–∂–µ {'–Ω–∞ —Å–º–µ–Ω–µ' if is_start else '–Ω–µ –Ω–∞ —Å–º–µ–Ω–µ'}.")
            return

        employee.is_on_shift = is_start
        await session.commit()
        
        action = "–Ω–∞—á–∞–ª–∏" if is_start else "–∑–∞–≤–µ—Ä—à–∏–ª–∏"
        keyboard = get_staff_login_keyboard() 
        if employee.role.can_be_assigned:
            keyboard = get_courier_keyboard(employee.is_on_shift)
        elif employee.role.can_manage_orders:
            keyboard = get_operator_keyboard(employee.is_on_shift)
        elif employee.role.can_serve_tables:
            keyboard = get_waiter_keyboard(employee.is_on_shift)
        
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ {action} —Å–º–µ–Ω—É.", reply_markup=keyboard)


    @dp_admin.message(F.text == "üö™ –í—ã–π—Ç–∏")
    async def logout_handler(message: Message, session: AsyncSession):
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role)))
        if employee:
            employee.telegram_user_id = None
            employee.is_on_shift = False
            if employee.role.can_be_assigned:
                 employee.current_order_id = None
            if employee.role.can_serve_tables:
                tables_to_unassign = await session.scalars(select(Table).where(Table.assigned_waiter_id == employee.id))
                for table in tables_to_unassign:
                    table.assigned_waiter_id = None

            await session.commit()
            await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", reply_markup=get_staff_login_keyboard())
        else:
            await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

    @dp_admin.message(F.text.in_({"üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üçΩ –ú–æ–∏ —Å—Ç–æ–ª–∏–∫–∏"}))
    async def handle_show_items_by_role(message: Message, session: AsyncSession, **kwargs: Dict[str, Any]):
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
        )
        if not employee:
            return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

        if message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã" and employee.role.can_be_assigned:
            await show_courier_orders(message, session)
        elif message.text == "üçΩ –ú–æ–∏ —Å—Ç–æ–ª–∏–∫–∏" and employee.role.can_serve_tables:
            await show_waiter_tables(message, session)
        else:
            await message.answer("‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.")

    @dp_admin.callback_query(F.data.startswith("courier_view_order_"))
    async def courier_view_order_details(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        order_id = int(callback.data.split("_")[3])
        order = await session.get(Order, order_id)
        if not order: return await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        status_name = order.status.name if order.status else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        address_info = order.address if order.is_delivery else '–°–∞–º–æ–≤—ã–≤–æ–∑'
        text = (f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_name}\n"
                f"–ê–¥—Ä–µ—Å: {html.quote(address_info)}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {html.quote(order.customer_name)}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(order.phone_number)}\n"
                f"–°–æ—Å—Ç–∞–≤: {html.quote(order.products)}\n"
                f"–°—É–º–º–∞: {order.total_price} –≥—Ä–Ω\n\n")
        
        kb = InlineKeyboardBuilder()
        statuses_res = await session.execute(
            select(OrderStatus).where(OrderStatus.visible_to_courier == True).order_by(OrderStatus.id)
        )
        courier_statuses = statuses_res.scalars().all()
        
        status_buttons = [
            InlineKeyboardButton(text=status.name, callback_data=f"staff_set_status_{order.id}_{status.id}")
            for status in courier_statuses
        ]
        kb.row(*status_buttons)

        if order.is_delivery and order.address:
            encoded_address = quote_plus(order.address)
            map_query = f"https://www.google.com/maps/search/?api=1&query={encoded_address}"
            kb.row(InlineKeyboardButton(text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=map_query))

        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º", callback_data="show_courier_orders_list"))
        await callback.message.edit_text(text, reply_markup=kb.as_markup())
        await callback.answer()

    @dp_admin.callback_query(F.data == "show_courier_orders_list")
    async def back_to_list(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        await show_courier_orders(callback, session)

    @dp_admin.callback_query(F.data.startswith("staff_set_status_"))
    async def staff_set_status(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        client_bot = dp_admin.get("client_bot")
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == callback.from_user.id).options(joinedload(Employee.role)))
        actor_info = f"{employee.role.name}: {employee.full_name}" if employee else f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (ID: {callback.from_user.id})"
        
        order_id, new_status_id = map(int, callback.data.split("_")[3:])
        
        order = await session.get(Order, order_id)
        if not order: return await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        new_status = await session.get(OrderStatus, new_status_id)
        if not new_status: return await callback.answer(f"–û—à–∏–±–∫–∞: –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        old_status_name = order.status.name if order.status else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        order.status_id = new_status.id
        alert_text = f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {new_status.name}"

        if new_status.is_completed_status or new_status.is_cancelled_status:
            if employee and employee.current_order_id == order_id:
                employee.current_order_id = None
            if new_status.is_completed_status and order.courier_id:
                order.completed_by_courier_id = order.courier_id

        session.add(OrderStatusHistory(order_id=order.id, status_id=new_status.id, actor_info=actor_info))
        await session.commit()
        
        await notify_all_parties_on_status_change(
            order=order, old_status_name=old_status_name, actor_info=actor_info,
            admin_bot=callback.bot, client_bot=client_bot, session=session
        )
        await callback.answer(alert_text)
        
        if order.order_type == "in_house":
            await show_waiter_table_orders(callback, session)
        else:
            await show_courier_orders(callback, session)
            
    # --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–§–ò–¶–ò–ê–ù–¢–ê ---
    @dp_admin.callback_query(F.data.startswith("waiter_view_table_"))
    async def show_waiter_table_orders(callback: CallbackQuery, session: AsyncSession):
        table_id = int(callback.data.split("_")[-1])
        table = await session.get(Table, table_id)
        if not table:
            return await callback.answer("–°—Ç–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

        final_statuses = await session.scalars(select(OrderStatus.id).where(or_(OrderStatus.is_completed_status == True, OrderStatus.is_cancelled_status == True)))
        active_orders = await session.scalars(select(Order).where(Order.table_id == table_id, Order.status_id.not_in(final_statuses.all())).options(joinedload(Order.status)))
        
        text = f"<b>–°—Ç–æ–ª–∏–∫: {html.escape(table.name)}</b>\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n"
        kb = InlineKeyboardBuilder()
        if not active_orders.all():
            text += "\n<i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.</i>"
        else:
            for order in active_orders.all():
                kb.row(InlineKeyboardButton(
                    text=f"–ó–∞–∫–∞–∑ #{order.id} ({order.status.name}) - {order.total_price} –≥—Ä–Ω",
                    callback_data=f"waiter_view_order_{order.id}"
                ))
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å—Ç–æ–ª–∏–∫–æ–≤", callback_data="back_to_tables_list"))
        
        await callback.message.edit_text(text, reply_markup=kb.as_markup())

 @dp_admin.callback_query(F.data == "back_to_tables_list")
    async def back_to_waiter_tables(callback: CallbackQuery, session: AsyncSession):
        await show_waiter_tables(callback, session)
        
    @dp_admin.callback_query(F.data.startswith("waiter_view_order_"))
    async def waiter_view_order_details(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[-1])
        order = await session.get(Order, order_id, options=[joinedload(Order.status), joinedload(Order.table)])
        if not order:
            return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)

        text = (f"<b>–ó–∞–∫–∞–∑ #{order.id} (–°—Ç–æ–ª–∏–∫: {order.table.name})</b>\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.status.name}\n\n"
                f"<b>–°–æ—Å—Ç–∞–≤:</b>\n- {html.quote(order.products).replace(', ', '\n- ')}\n\n"
                f"<b>–°—É–º–º–∞:</b> {order.total_price} –≥—Ä–Ω")
        
        statuses = await session.scalars(select(OrderStatus).where(OrderStatus.visible_to_waiter == True).order_by(OrderStatus.id))
        kb = InlineKeyboardBuilder()
        status_buttons = [
            InlineKeyboardButton(text=s.name, callback_data=f"staff_set_status_{order.id}_{s.id}")
            for s in statuses.all()
        ]
        kb.row(*status_buttons)
        # NEW: Add manage button
        kb.row(InlineKeyboardButton(text="‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º", callback_data=f"waiter_manage_order_{order.id}"))
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–æ–ª–∏–∫—É", callback_data=f"waiter_view_table_{order.table_id}"))

        await callback.message.edit_text(text, reply_markup=kb.as_markup())


    # NEW: Handler and view generator for full order management by waiter
    async def _generate_waiter_order_view(order: Order, session: AsyncSession):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º."""
        await session.refresh(order, ['status'])
        status_name = order.status.name if order.status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        products_formatted = "- " + html.quote(order.products or '').replace(", ", "\n- ")

        text = (f"<b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º #{order.id}</b> (–°—Ç—ñ–ª: {order.table.name})\n\n"
                f"<b>–°–∫–ª–∞–¥:</b>\n{products_formatted}\n\n<b>–°—É–º–∞:</b> {order.total_price} –≥—Ä–Ω\n\n"
                f"<b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_name}")

        kb = InlineKeyboardBuilder()
        statuses_res = await session.execute(
            select(OrderStatus).where(OrderStatus.visible_to_waiter == True).order_by(OrderStatus.id)
        )
        statuses = statuses_res.scalars().all()
        status_buttons = [
            InlineKeyboardButton(text=f"{'‚úÖ ' if s.id == order.status_id else ''}{s.name}", callback_data=f"staff_set_status_{order.id}_{s.id}")
            for s in statuses
        ]
        for i in range(0, len(status_buttons), 2):
            kb.row(*status_buttons[i:i+2])

        kb.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"edit_order_{order.id}"))
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–æ–ª–∏–∫–∞", callback_data=f"waiter_view_table_{order.table_id}"))
        
        return text, kb.as_markup()

    @dp_admin.callback_query(F.data.startswith("waiter_manage_order_"))
    async def manage_in_house_order_handler(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[-1])
        order = await session.get(Order, order_id, options=[joinedload(Order.table)])
        if not order:
            return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

        text, keyboard = await _generate_waiter_order_view(order, session)
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            logger.warning(f"Could not edit message in manage_in_house_order_handler: {e}. Sending new one.")
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=keyboard)

        await callback.answer()
