# courier_handlers.py

import logging
import html as html_module
from aiogram import Dispatcher, F, html, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, or_
from sqlalchemy.orm import joinedload
from typing import Dict, Any
from urllib.parse import quote_plus
import re 

# –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ OrderStatusHistory, Table, Category, Product
from models import Employee, Order, OrderStatus, Settings, OrderStatusHistory, Table, Category, Product
from notification_manager import notify_all_parties_on_status_change

# –ù–û–í–Ü –Ü–ú–ü–û–†–¢–ò
from aiogram import html as aiogram_html
from aiogram.utils.keyboard import InlineKeyboardButton

logger = logging.getLogger(__name__)

class StaffAuthStates(StatesGroup):
    waiting_for_phone = State()

# –ù–û–í–ê –ú–ê–®–ò–ù–ê –°–¢–ê–ù–Ü–í (FSM) –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
class WaiterCreateOrderStates(StatesGroup):
    managing_cart = State()
    choosing_category = State()
    choosing_product = State()


def get_staff_login_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üîê –í—Ö—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"))
    builder.row(KeyboardButton(text="üöö –í—Ö—ñ–¥ –∫—É—Ä'—î—Ä–∞"))
    builder.row(KeyboardButton(text="ü§µ –í—Ö—ñ–¥ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞"))
    return builder.as_markup(resize_keyboard=True)

# –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –û–±'—î–¥–Ω—É—î –∫–Ω–æ–ø–∫–∏ –≤—Å—ñ—Ö —Ä–æ–ª–µ–π (–ö–£–†'–Ñ–†, –û–§–Ü–¶–Ü–ê–ù–¢)
def get_staff_keyboard(employee: Employee):
    builder = ReplyKeyboardBuilder()
    role = employee.role
    
    # 1. –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–º—ñ–Ω–æ—é
    if employee.is_on_shift:
        builder.row(KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É"))
    else:
        builder.row(KeyboardButton(text="üü¢ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É"))

    # 2. –†–æ–ª—å–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–∞ –∑–º—ñ–Ω—ñ)
    role_buttons = []
    if employee.is_on_shift:
        # –ö—É—Ä'—î—Ä—Å—å–∫—ñ –∫–Ω–æ–ø–∫–∏
        if role.can_be_assigned:
            role_buttons.append(KeyboardButton(text="üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
        # –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç—Å—å–∫—ñ –∫–Ω–æ–ø–∫–∏
        if role.can_serve_tables:
            role_buttons.append(KeyboardButton(text="üçΩ –ú–æ—ó —Å—Ç–æ–ª–∏–∫–∏"))
        # –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞—Ä–∞–∑—ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ)
        if role.can_manage_orders:
             pass 
            
    if role_buttons:
        # –†–æ–∑–º—ñ—â—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏
        builder.row(*role_buttons)

    # 3. –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
    builder.row(KeyboardButton(text="üö™ –í–∏–π—Ç–∏"))
    
    return builder.as_markup(resize_keyboard=True)

# –û–ù–û–í–õ–ï–ù–Ü –û–ë–ì–û–†–¢–ö–ò: –¢–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—é—Ç—å Employee —ñ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
def get_courier_keyboard(employee: Employee):
    return get_staff_keyboard(employee)

def get_operator_keyboard(employee: Employee):
    return get_staff_keyboard(employee)

def get_waiter_keyboard(employee: Employee):
    return get_staff_keyboard(employee)


async def show_courier_orders(message_or_callback: Message | CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
    user_id = message_or_callback.from_user.id
    message = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback

    employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == user_id).options(joinedload(Employee.role)))
    
    if not employee or not employee.role.can_be_assigned:
         return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∫—É—Ä'—î—Ä–∞.")

    final_statuses_res = await session.execute(
        select(OrderStatus.id).where(or_(OrderStatus.is_completed_status == True, OrderStatus.is_cancelled_status == True))
    )
    final_status_ids = final_statuses_res.scalars().all()

    orders_res = await session.execute(
        select(Order).options(joinedload(Order.status)).where(
            Order.courier_id == employee.id,
            Order.status_id.not_in(final_status_ids)
        ).order_by(Order.id.desc())
    )
    orders = orders_res.scalars().all()

    text = "üöö <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
    if not employee.is_on_shift:
         text += "üî¥ –í–∏ –Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üü¢ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É', —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n"
    if not orders:
        text += "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –≤–∞–º."
    
    kb = InlineKeyboardBuilder()
    if orders:
        for order in orders:
            status_name = order.status.name if order.status else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            address_info = order.address if order.is_delivery else '–°–∞–º–æ–≤–∏–≤—ñ–∑'
            text += (f"<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b> ({status_name})\n"
                     f"üìç –ê–¥—Ä–µ—Å–∞: {html_module.escape(address_info)}\n"
                     f"üí∞ –°—É–º–∞: {order.total_price} –≥—Ä–Ω\n\n")
            kb.row(InlineKeyboardButton(text=f"–î—ñ—ó –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é #{order.id}", callback_data=f"courier_view_order_{order.id}"))
        kb.adjust(1)
    
    try:
        if isinstance(message_or_callback, CallbackQuery):
            await message.edit_text(text, reply_markup=kb.as_markup())
            await message_or_callback.answer()
        else:
            await message.answer(text, reply_markup=kb.as_markup())
    except TelegramBadRequest as e:
         if "message is not modified" in str(e):
             await message_or_callback.answer("–î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è.")
         else:
             logger.error(f"Error in show_courier_orders: {e}")
             await message.answer(text, reply_markup=kb.as_markup())

async def show_waiter_tables(message_or_callback: Message | CallbackQuery, session: AsyncSession, state: FSMContext):
    # –î–û–î–ê–ù–û: state: FSMContext
    is_callback = isinstance(message_or_callback, CallbackQuery)
    message = message_or_callback.message if is_callback else message_or_callback
    user_id = message_or_callback.from_user.id
    
    # –î–û–î–ê–ù–û: –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω FSM (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
    await state.clear()
    
    employee = await session.scalar(
        select(Employee).where(Employee.telegram_user_id == user_id).options(joinedload(Employee.role))
    )
    
    if not employee or not employee.role.can_serve_tables:
        if is_callback:
            await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞.", show_alert=True)
            return
        else:
            return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞.")

    if not employee.is_on_shift:
        text_off_shift = "üî¥ –í–∏ –Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑–º—ñ–Ω—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤–æ—ó —Å—Ç–æ–ª–∏–∫–∏."
        if is_callback:
            await message_or_callback.answer(text_off_shift, show_alert=True)
            return
        else:
            return await message.answer(text_off_shift)

    tables_res = await session.execute(
        select(Table).where(Table.assigned_waiters.any(Employee.id == employee.id)).order_by(Table.name)
    )
    tables = tables_res.scalars().all()

    text = "üçΩ <b>–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω—ñ –∑–∞ –≤–∞–º–∏ —Å—Ç–æ–ª–∏–∫–∏:</b>\n\n"
    kb = InlineKeyboardBuilder()
    if not tables:
        text += "–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞."
    else:
        for table in tables:
            kb.add(InlineKeyboardButton(text=f"–°—Ç–æ–ª–∏–∫: {html_module.escape(table.name)}", callback_data=f"waiter_view_table_{table.id}"))
    kb.adjust(1)
    
    if is_callback:
        try:
            await message.edit_text(text, reply_markup=kb.as_markup())
        except TelegramBadRequest: 
            await message.delete()
            await message.answer(text, reply_markup=kb.as_markup())
        await message_or_callback.answer()
    else:
        await message.answer(text, reply_markup=kb.as_markup())


# –û–ù–û–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è get_staff_keyboard –≤ start_handler
async def start_handler(message: Message, state: FSMContext, session: AsyncSession, **kwargs: Dict[str, Any]):
    await state.clear()
    employee = await session.scalar(
        select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
    )
    if employee:
        keyboard = get_staff_keyboard(employee) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        await message.answer(f"üéâ –î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {employee.full_name}! –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º {employee.role.name}.",
                             reply_markup=keyboard)
    else:
        await message.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.",
                             reply_markup=get_staff_login_keyboard())


def register_courier_handlers(dp_admin: Dispatcher):
    dp_admin.message.register(start_handler, CommandStart())

    @dp_admin.message(F.text.in_({"üöö –í—Ö—ñ–¥ –∫—É—Ä'—î—Ä–∞", "üîê –í—Ö—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "ü§µ –í—Ö—ñ–¥ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞"}))
    async def staff_login_start(message: Message, state: FSMContext, session: AsyncSession):
        user_id = message.from_user.id
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == user_id).options(joinedload(Employee.role))
        )
        if employee:
            return await message.answer(f"‚úÖ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ {employee.role.name}. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–π–¥—ñ—Ç—å —ñ–∑ —Å–∏—Å—Ç–µ–º–∏.", 
                                        reply_markup=get_staff_login_keyboard())
        
        role_type = "unknown"
        if "–∫—É—Ä'—î—Ä–∞" in message.text: role_type = "courier"
        elif "–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" in message.text: role_type = "operator"
        elif "–æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞" in message.text: role_type = "waiter"
            
        await state.set_state(StaffAuthStates.waiting_for_phone)
        await state.update_data(role_type=role_type)
        kb = InlineKeyboardBuilder().add(InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_auth")).as_markup()
        await message.answer(f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ä–æ–ª—ñ **{role_type}**:", reply_markup=kb)

    @dp_admin.message(StaffAuthStates.waiting_for_phone)
    async def process_staff_phone(message: Message, state: FSMContext, session: AsyncSession):
        phone = message.text.strip()
        data = await state.get_data()
        role_type = data.get("role_type")
        
        employee = await session.scalar(select(Employee).options(joinedload(Employee.role)).where(Employee.phone_number == phone))
        
        role_checks = {
            "courier": lambda e: e and e.role.can_be_assigned,
            "operator": lambda e: e and e.role.can_manage_orders,
            "waiter": lambda e: e and e.role.can_serve_tables,
        }
        
        if role_checks.get(role_type, lambda e: False)(employee):
            employee.telegram_user_id = message.from_user.id
            await session.commit()
            await state.clear()
            
            keyboard = get_staff_keyboard(employee) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            
            await message.answer(f"üéâ –î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {employee.full_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ {employee.role.name}.", reply_markup=keyboard)
        else:
            await message.answer(f"‚ùå –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–ª—ñ '{role_type}'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    @dp_admin.callback_query(F.data == "cancel_auth")
    async def cancel_auth(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        try:
             await callback.message.edit_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        except Exception:
             await callback.message.delete()
             await callback.message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_staff_login_keyboard())
    
    @dp_admin.message(F.text.in_({"üü¢ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É", "üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É"}))
    async def toggle_shift(message: Message, session: AsyncSession):
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
        )
        if not employee: return
        is_start = message.text.startswith("üü¢")
        if employee.is_on_shift == is_start:
            await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤–∂–µ {'–Ω–∞ –∑–º—ñ–Ω—ñ' if is_start else '–Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ'}.")
            return

        employee.is_on_shift = is_start
        await session.commit()
        
        action = "–ø–æ—á–∞–ª–∏" if is_start else "–∑–∞–≤–µ—Ä—à–∏–ª–∏"
        
        keyboard = get_staff_keyboard(employee) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        
        await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ {action} –∑–º—ñ–Ω—É.", reply_markup=keyboard)


    @dp_admin.message(F.text == "üö™ –í–∏–π—Ç–∏")
    async def logout_handler(message: Message, session: AsyncSession):
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == message.from_user.id)
            .options(joinedload(Employee.role), joinedload(Employee.assigned_tables))
        )
        if employee:
            employee.telegram_user_id = None
            employee.is_on_shift = False
            if employee.role.can_be_assigned:
                 employee.current_order_id = None
            if employee.role.can_serve_tables:
                employee.assigned_tables.clear()

            await session.commit()
            await message.answer("üëã –í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.", reply_markup=get_staff_login_keyboard())
        else:
            await message.answer("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")

    @dp_admin.message(F.text.in_({"üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üçΩ –ú–æ—ó —Å—Ç–æ–ª–∏–∫–∏"}))
    async def handle_show_items_by_role(message: Message, session: AsyncSession, state: FSMContext, **kwargs: Dict[str, Any]): # –î–æ–¥–∞–Ω–æ state
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role))
        )
        if not employee:
            return await message.answer("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")

        if message.text == "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" and employee.role.can_be_assigned:
            await show_courier_orders(message, session)
        elif message.text == "üçΩ –ú–æ—ó —Å—Ç–æ–ª–∏–∫–∏" and employee.role.can_serve_tables:
            await show_waiter_tables(message, session, state) # –ü–µ—Ä–µ–¥–∞—î–º–æ state
        else:
            await message.answer("‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ.")

    @dp_admin.callback_query(F.data.startswith("courier_view_order_"))
    async def courier_view_order_details(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        order_id = int(callback.data.split("_")[3])
        order = await session.get(Order, order_id)
        if not order: return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        status_name = order.status.name if order.status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        address_info = order.address if order.is_delivery else '–°–∞–º–æ–≤–∏–≤—ñ–∑'
        text = (f"<b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_name}\n"
                f"–ê–¥—Ä–µ—Å–∞: {html_module.escape(address_info)}\n"
                f"–ö–ª—ñ—î–Ω—Ç: {html_module.escape(order.customer_name)}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {html_module.escape(order.phone_number)}\n" 
                f"–°–∫–ª–∞–¥: {html_module.escape(order.products)}\n"
                f"–°—É–º–∞: {order.total_price} –≥—Ä–Ω\n\n")
        
        kb = InlineKeyboardBuilder()
        statuses_res = await session.execute(
            select(OrderStatus).where(OrderStatus.visible_to_courier == True).order_by(OrderStatus.id)
        )
        courier_statuses = statuses_res.scalars().all()
        
        status_buttons = [
            InlineKeyboardButton(text=status.name, callback_data=f"staff_set_status_{order.id}_{status.id}")
            for status in courier_statuses
        ]
        kb.row(*status_buttons)
        
        if order.is_delivery and order.address:
            encoded_address = quote_plus(order.address)
            map_query = f"https://maps.google.com/?q={encoded_address}"
            kb.row(InlineKeyboardButton(text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ", url=map_query))

        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–æ—ó—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="show_courier_orders_list"))
        await callback.message.edit_text(text, reply_markup=kb.as_markup())
        await callback.answer()

    @dp_admin.callback_query(F.data == "show_courier_orders_list")
    async def back_to_list(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        await show_courier_orders(callback, session)

    @dp_admin.callback_query(F.data.startswith("staff_set_status_"))
    async def staff_set_status(callback: CallbackQuery, session: AsyncSession, **kwargs: Dict[str, Any]):
        client_bot = dp_admin.get("client_bot")
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == callback.from_user.id).options(joinedload(Employee.role)))
        actor_info = f"{employee.role.name}: {employee.full_name}" if employee else f"–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ (ID: {callback.from_user.id})"
        
        order_id, new_status_id = map(int, callback.data.split("_")[3:])
        
        order = await session.get(Order, order_id, options=[joinedload(Order.table)])
        if not order: return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        
        new_status = await session.get(OrderStatus, new_status_id)
        if not new_status: return await callback.answer(f"–ü–æ–º–∏–ª–∫–∞: –°—Ç–∞—Ç—É—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        old_status_name = order.status.name if order.status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        order.status_id = new_status.id
        alert_text = f"–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ: {new_status.name}"

        if new_status.is_completed_status or new_status.is_cancelled_status:
            if employee and employee.current_order_id == order_id:
                employee.current_order_id = None
            if new_status.is_completed_status and order.courier_id:
                order.completed_by_courier_id = order.courier_id

        session.add(OrderStatusHistory(order_id=order.id, status_id=new_status.id, actor_info=actor_info))
        await session.commit()
        
        await notify_all_parties_on_status_change(
            order=order, old_status_name=old_status_name, actor_info=actor_info,
            admin_bot=callback.bot, client_bot=client_bot, session=session
        )
        await callback.answer(alert_text)
        
        if order.order_type == "in_house":
            await manage_in_house_order_handler(callback, session, order_id=order_id)
        else:
            await show_courier_orders(callback, session)
            
    # --- –ù–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –û–§–Ü–¶–Ü–ê–ù–¢–ê ---
    
    # –û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ state
    @dp_admin.callback_query(F.data.startswith("waiter_view_table_"))
    async def show_waiter_table_orders(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
        await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        
        table_id = int(callback.data.split("_")[-1])
        table = await session.get(Table, table_id)
        if not table:
            return await callback.answer("–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)

        final_statuses_res = await session.execute(select(OrderStatus.id).where(or_(OrderStatus.is_completed_status == True, OrderStatus.is_cancelled_status == True)))
        final_statuses = final_statuses_res.scalars().all()
        
        active_orders_res = await session.execute(select(Order).where(Order.table_id == table_id, Order.status_id.not_in(final_statuses)).options(joinedload(Order.status)))
        active_orders = active_orders_res.scalars().all()

        text = f"<b>–°—Ç–æ–ª–∏–∫: {html_module.escape(table.name)}</b>\n\n–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        kb = InlineKeyboardBuilder()
        if not active_orders:
            text += "\n<i>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.</i>"
        else:
            for order in active_orders:
                kb.row(InlineKeyboardButton(
                    text=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} ({order.status.name}) - {order.total_price} –≥—Ä–Ω",
                    callback_data=f"waiter_manage_order_{order.id}"
                ))
        
        # –ù–û–í–ê –ö–ù–û–ü–ö–ê: –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        kb.row(InlineKeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"waiter_create_order_{table.id}"))
        
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É —Å—Ç–æ–ª–∏–∫—ñ–≤", callback_data="back_to_tables_list"))
        
        await callback.message.edit_text(text, reply_markup=kb.as_markup())
        await callback.answer()

    @dp_admin.callback_query(F.data == "back_to_tables_list")
    async def back_to_waiter_tables(callback: CallbackQuery, session: AsyncSession, state: FSMContext): # –î–æ–¥–∞–Ω–æ state
        await show_waiter_tables(callback, session, state) # –ü–µ—Ä–µ–¥–∞—î–º–æ state

    @dp_admin.callback_query(F.data.startswith("waiter_view_order_"))
    async def waiter_view_order_details(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[-1])
        await manage_in_house_order_handler(callback, session, order_id=order_id)
        
    async def _generate_waiter_order_view(order: Order, session: AsyncSession):
        await session.refresh(order, ['status', 'accepted_by_waiter'])
        status_name = order.status.name if order.status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        products_formatted = "- " + html_module.escape(order.products or '').replace(", ", "\n- ")
        
        if order.accepted_by_waiter:
            accepted_by_text = f"<b>–ü—Ä–∏–π–Ω—è—Ç–æ:</b> {html_module.escape(order.accepted_by_waiter.full_name)}\n\n"
        else:
            accepted_by_text = "<b>–ü—Ä–∏–π–Ω—è—Ç–æ:</b> <i>–û—á—ñ–∫—É—î...</i>\n\n"

        text = (f"<b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º #{order.id}</b> (–°—Ç—ñ–ª: {order.table.name})\n\n"
                f"<b>–°–∫–ª–∞–¥:</b>\n{products_formatted}\n\n<b>–°—É–º–∞:</b> {order.total_price} –≥—Ä–Ω\n\n"
                f"{accepted_by_text}"
                f"<b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_name}")

        kb = InlineKeyboardBuilder()
        
        if not order.accepted_by_waiter_id:
            kb.row(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"waiter_accept_order_{order.id}"))

        statuses_res = await session.execute(
            select(OrderStatus).where(OrderStatus.visible_to_waiter == True).order_by(OrderStatus.id)
        )
        statuses = statuses_res.scalars().all()
        status_buttons = [
            InlineKeyboardButton(text=f"{'‚úÖ ' if s.id == order.status_id else ''}{s.name}", callback_data=f"staff_set_status_{order.id}_{s.id}")
            for s in statuses
        ]
        for i in range(0, len(status_buttons), 2):
            kb.row(*status_buttons[i:i+2])

        kb.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"edit_order_{order.id}")) # TODO: This refers to admin_handlers FSM
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–æ–ª–∏–∫–∞", callback_data=f"waiter_view_table_{order.table_id}"))
        
        return text, kb.as_markup()

    @dp_admin.callback_query(F.data.startswith("waiter_manage_order_"))
    async def manage_in_house_order_handler(callback: CallbackQuery, session: AsyncSession, order_id: int = None):
        if not order_id:
            order_id = int(callback.data.split("_")[-1])

        order = await session.get(Order, order_id, options=[joinedload(Order.table), joinedload(Order.status), joinedload(Order.accepted_by_waiter)])
        if not order:
            return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

        text, keyboard = await _generate_waiter_order_view(order, session)
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                logger.warning(f"Could not edit message in manage_in_house_order_handler: {e}. Sending new one.")
                await callback.message.delete()
                await callback.message.answer(text, reply_markup=keyboard)

        await callback.answer()

    @dp_admin.callback_query(F.data.startswith("waiter_accept_order_"))
    async def waiter_accept_order(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[-1])
        
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == callback.from_user.id)
        )
        if not employee:
            return await callback.answer("–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.", show_alert=True)

        order = await session.get(
            Order, 
            order_id, 
            options=[
                joinedload(Order.table).joinedload(Table.assigned_waiters),
                joinedload(Order.status)
            ]
        )

        if not order:
            await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            try: await callback.message.delete()
            except TelegramBadRequest: pass
            return

        if order.accepted_by_waiter_id:
            await callback.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ —ñ–Ω—à–∏–º –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–æ–º.", show_alert=True)
            await manage_in_house_order_handler(callback, session, order_id=order_id)
            return

        order.accepted_by_waiter_id = employee.id
        old_status_name = order.status.name
        
        processing_status = None
        try:
            processing_status = await session.scalar(select(OrderStatus).where(OrderStatus.name == "–í –æ–±—Ä–æ–±—Ü—ñ").limit(1))
            if processing_status:
                order.status_id = processing_status.id
                session.add(OrderStatusHistory(
                    order_id=order.id, 
                    status_id=processing_status.id, 
                    actor_info=f"–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç (–ø—Ä–∏–π–Ω—è–≤): {employee.full_name}"
                ))
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}: {e}")

        await session.commit()
        await callback.answer(f"–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}!", show_alert=False)

        await manage_in_house_order_handler(callback, session, order_id=order_id)

        notification_text = (
            f"‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} (–°—Ç—ñ–ª: {html.escape(order.table.name)}) "
            f"–±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–æ–º: <b>{html.escape(employee.full_name)}</b>"
        )
        
        target_chat_ids = set()
        for w in order.table.assigned_waiters:
            if w.telegram_user_id and w.is_on_shift and w.id != employee.id:
                target_chat_ids.add(w.telegram_user_id)
        
        settings = await session.get(Settings, 1)
        if settings and settings.admin_chat_id:
            try:
                target_chat_ids.add(int(settings.admin_chat_id))
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π admin_chat_id: {settings.admin_chat_id}")
            
        for chat_id in target_chat_ids:
            try:
                await callback.bot.send_message(chat_id, notification_text)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ {chat_id} –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}: {e}")

        if processing_status and processing_status.notify_customer and order.user_id:
            client_bot = dp_admin.get("client_bot")
            if client_bot:
                try:
                    await client_bot.send_message(order.user_id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É.")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ {order.user_id} –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")

    # --- –ù–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø FSM –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ---

    async def _display_waiter_cart(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
        data = await state.get_data()
        cart = data.get("cart", {})
        table_name = data.get("table_name", "N/A")
        table_id = data.get("table_id")

        text = f"üìù <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è: {html_module.escape(table_name)}</b>\n\n<b>–°–∫–ª–∞–¥:</b>\n"
        kb = InlineKeyboardBuilder()
        total_price = 0

        if not cart:
            text += "<i>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</i>"
        else:
            for prod_id, item in cart.items():
                item_total = item['price'] * item['quantity']
                total_price += item_total
                text += f"- {html_module.escape(item['name'])} ({item['quantity']} —à—Ç.) = {item_total} –≥—Ä–Ω\n"
                kb.row(
                    InlineKeyboardButton(text="‚ûñ", callback_data=f"waiter_cart_qnt_{prod_id}_-1"),
                    InlineKeyboardButton(text=f"{item['quantity']}x {html_module.escape(item['name'])}", callback_data="noop"),
                    InlineKeyboardButton(text="‚ûï", callback_data=f"waiter_cart_qnt_{prod_id}_1")
                )
        
        text += f"\n\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} –≥—Ä–Ω</b>"
    
        kb.row(InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É", callback_data="waiter_cart_add_item"))
        if cart:
            kb.row(InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="waiter_cart_finalize"))
        # –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏" –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–æ–ª–∏–∫–∞
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ (–ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å—Ç–æ–ª–∏–∫–∞)", callback_data=f"waiter_view_table_{table_id}")) 
    
        try:
            await callback.message.edit_text(text, reply_markup=kb.as_markup())
        except TelegramBadRequest as e:
            logger.warning(f"Error editing message in _display_waiter_cart: {e}")
            # –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è
            pass
        await callback.answer()

    @dp_admin.callback_query(F.data.startswith("waiter_create_order_"))
    async def waiter_create_order_start(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–ü–æ—á–∞—Ç–æ–∫ FSM: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–æ–ª–∏–∫–∞."""
        table_id = int(callback.data.split("_")[-1])
        table = await session.get(Table, table_id)
        if not table:
            return await callback.answer("–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        
        await state.set_state(WaiterCreateOrderStates.managing_cart)
        await state.update_data(cart={}, table_id=table_id, table_name=table.name)
        
        await _display_waiter_cart(callback, state, session)

    @dp_admin.callback_query(WaiterCreateOrderStates.managing_cart, F.data == "waiter_cart_add_item")
    async def waiter_cart_add_item(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
        await state.set_state(WaiterCreateOrderStates.choosing_category)
        
        categories_res = await session.execute(
            select(Category).where(Category.show_in_restaurant == True).order_by(Category.sort_order, Category.name)
        )
        categories = categories_res.scalars().all()
        
        kb = InlineKeyboardBuilder()
        for cat in categories:
            kb.add(InlineKeyboardButton(text=cat.name, callback_data=f"waiter_cart_cat_{cat.id}"))
        kb.adjust(2)
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫–∞", callback_data="waiter_cart_back_to_cart"))
        
        await callback.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb.as_markup())
        await callback.answer()

    @dp_admin.callback_query(F.data == "waiter_cart_back_to_cart", WaiterCreateOrderStates.choosing_category)
    @dp_admin.callback_query(F.data == "waiter_cart_back_to_cart", WaiterCreateOrderStates.choosing_product)
    async def waiter_cart_back_to_cart(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∫–æ—à–∏–∫–∞ –∑—ñ —Å—Ç–∞–Ω—ñ–≤ –≤–∏–±–æ—Ä—É."""
        await state.set_state(WaiterCreateOrderStates.managing_cart)
        await _display_waiter_cart(callback, state, session)

    @dp_admin.callback_query(WaiterCreateOrderStates.choosing_category, F.data.startswith("waiter_cart_cat_"))
    async def waiter_cart_show_category(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–≤ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
        category_id = int(callback.data.split("_")[-1])
        await state.set_state(WaiterCreateOrderStates.choosing_product)
        
        products_res = await session.execute(
            select(Product).where(
                Product.category_id == category_id,
                Product.is_active == True
            ).order_by(Product.name)
        )
        products = products_res.scalars().all()
        
        kb = InlineKeyboardBuilder()
        for prod in products:
            kb.add(InlineKeyboardButton(text=f"{prod.name} - {prod.price} –≥—Ä–Ω", callback_data=f"waiter_cart_prod_{prod.id}"))
        kb.adjust(1)
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="waiter_cart_back_to_categories"))
        
        await callback.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É:", reply_markup=kb.as_markup())
        await callback.answer()

    @dp_admin.callback_query(F.data == "waiter_cart_back_to_categories", WaiterCreateOrderStates.choosing_product)
    async def waiter_cart_back_to_categories(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π."""
        await waiter_cart_add_item(callback, state, session)

    @dp_admin.callback_query(WaiterCreateOrderStates.choosing_product, F.data.startswith("waiter_cart_prod_"))
    async def waiter_cart_add_product(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏ –¥–æ –∫–æ—à–∏–∫–∞ –≤ FSM."""
        product_id = int(callback.data.split("_")[-1])
        product = await session.get(Product, product_id)
        if not product:
            return await callback.answer("–°—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        
        data = await state.get_data()
        cart = data.get("cart", {})
        
        prod_id_str = str(product_id)
        if prod_id_str in cart:
            cart[prod_id_str]["quantity"] += 1
        else:
            cart[prod_id_str] = {"name": product.name, "price": product.price, "quantity": 1}
        
        await state.update_data(cart=cart)
        await state.set_state(WaiterCreateOrderStates.managing_cart)
        await _display_waiter_cart(callback, state, session)
        await callback.answer(f"{product.name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.")

    @dp_admin.callback_query(WaiterCreateOrderStates.managing_cart, F.data.startswith("waiter_cart_qnt_"))
    async def waiter_cart_change_quantity(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç—Ä–∞–≤–∏ –≤ –∫–æ—à–∏–∫—É FSM."""
        prod_id, change = callback.data.split("_")[3:]
        change = int(change)
        
        data = await state.get_data()
        cart = data.get("cart", {})
        
        if prod_id not in cart:
            return await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Å—Ç—Ä–∞–≤–∏ –Ω–µ–º–∞—î –≤ –∫–æ—à–∏–∫—É.")
        
        cart[prod_id]["quantity"] += change
        
        if cart[prod_id]["quantity"] <= 0:
            del cart[prod_id]
            await callback.answer("–°—Ç—Ä–∞–≤—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await callback.answer()
        
        await state.update_data(cart=cart)
        await _display_waiter_cart(callback, state, session)

    @dp_admin.callback_query(WaiterCreateOrderStates.managing_cart, F.data == "waiter_cart_finalize")
    async def waiter_cart_finalize(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î."""
        data = await state.get_data()
        cart = data.get("cart", {})
        table_id = data.get("table_id")
        table_name = data.get("table_name")
        
        if not cart:
            return await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!", show_alert=True)
        
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_user_id == callback.from_user.id)
        )
        if not employee:
            return await callback.answer("–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.", show_alert=True)

        total_price = 0
        product_strings = []
        for item in cart.values():
            total_price += item['price'] * item['quantity']
            product_strings.append(f"{item['name']} x {item['quantity']}")
        products_str = ", ".join(product_strings)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ç—É—Å "–í –æ–±—Ä–æ–±—Ü—ñ"
        processing_status = await session.scalar(select(OrderStatus).where(OrderStatus.name == "–í –æ–±—Ä–æ–±—Ü—ñ").limit(1))
        status_id_to_set = processing_status.id if processing_status else 1 # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ "–ù–æ–≤–∏–π"
        actor_info = f"–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç (—Å—Ç–≤–æ—Ä–∏–≤): {employee.full_name}"

        order = Order(
            customer_name=f"–°—Ç—ñ–ª: {table_name}",
            phone_number=f"table_{table_id}",
            address=None,
            products=products_str,
            total_price=total_price,
            is_delivery=False,
            delivery_time="In House",
            order_type="in_house",
            table_id=table_id,
            status_id=status_id_to_set, 
            accepted_by_waiter_id=employee.id # –ü—Ä–∏–π–º–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        )
        session.add(order)
        await session.commit()
        await session.refresh(order)
        
        # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        history_entry = OrderStatusHistory(
            order_id=order.id,
            status_id=order.status_id,
            actor_info=actor_info
        )
        session.add(history_entry)
        await session.commit()
        
        await callback.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} —Å—Ç–≤–æ—Ä–µ–Ω–æ!", show_alert=True)
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç (–∫—É—Ö–Ω—é)
        admin_bot = dp_admin.get("bot_instance")
        if admin_bot:
            settings = await session.get(Settings, 1)
            if settings and settings.admin_chat_id:
                try:
                    admin_chat_id = int(settings.admin_chat_id)
                    
                    order_details_text = (
                        f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –°–¢–í–û–†–ï–ù–û –û–§–Ü–¶–Ü–ê–ù–¢–û–ú</b>\n"
                        f"<b>–°—Ç—ñ–ª:</b> {aiogram_html.bold(table_name)}\n"
                        f"<b>–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç:</b> {aiogram_html.quote(employee.full_name)}\n\n"
                        f"<b>–°–∫–ª–∞–¥:</b>\n- " + aiogram_html.quote(products_str.replace(", ", "\n- ")) +
                        f"\n\n<b>–°—É–º–∞:</b> {total_price} –≥—Ä–Ω"
                    )
                    
                    kb_admin = InlineKeyboardBuilder()
                    kb_admin.row(InlineKeyboardButton(text="‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º", callback_data=f"waiter_manage_order_{order.id}"))
                    
                    await admin_bot.send_message(
                        admin_chat_id, 
                        order_details_text,
                        reply_markup=kb_admin.as_markup()
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–≤—ñ–¥ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞) –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç {settings.admin_chat_id}: {e}")

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–æ–ª–∏–∫–∞
        await state.clear()
        await show_waiter_table_orders(callback, session, state)
