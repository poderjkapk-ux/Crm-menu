# admin_tables.py

import html
import qrcode
import io
import json
from fastapi import APIRouter, Depends, Form, HTTPException, Request
from fastapi.responses import HTMLResponse, RedirectResponse, StreamingResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import joinedload, selectinload
from typing import List, Optional # <--- –î–æ–¥–∞–Ω–æ List, Optional

from models import Table, Employee, Role
from templates import ADMIN_HTML_TEMPLATE, ADMIN_TABLES_BODY
from dependencies import get_db_session, check_credentials

router = APIRouter()

@router.get("/admin/tables", response_class=HTMLResponse)
async def admin_tables_list(
    request: Request,
    session: AsyncSession = Depends(get_db_session),
    username: str = Depends(check_credentials)
):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–æ–ª–∏–∫–∞–º–∏."""
    tables_res = await session.execute(
        select(Table).options(
            # –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ selectinload –¥–ª—è M2M
            selectinload(Table.assigned_waiters) 
        ).order_by(Table.name)
    )
    tables = tables_res.scalars().all()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –≤—Å—ñ—Ö —Ä–æ–ª–µ–π, —è–∫—ñ –º–æ–∂—É—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫–∏
    waiter_roles_res = await session.execute(select(Role.id).where(Role.can_serve_tables == True))
    waiter_role_ids = waiter_roles_res.scalars().all()
    
    waiters_on_shift = []
    if waiter_role_ids:
        waiters_res = await session.execute(
            select(Employee).where(
                Employee.role_id.in_(waiter_role_ids),
                Employee.is_on_shift == True
            ).order_by(Employee.full_name)
        )
        waiters_on_shift = [{"id": w.id, "full_name": w.full_name} for w in waiters_res.scalars().all()]

    waiters_json = json.dumps(waiters_on_shift)

    rows = []
    for table in tables:
        # –ó–ú–Ü–ù–ï–ù–û: –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤
        waiter_names = ", ".join([html.escape(w.full_name) for w in table.assigned_waiters])
        if not waiter_names:
            waiter_names = "<i>–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ</i>"
            
        # –ó–ú–Ü–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ ID –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤ —É –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        assigned_waiter_ids = json.dumps([w.id for w in table.assigned_waiters])

        rows.append(f"""
        <tr>
            <td>{table.id}</td>
            <td>{html.escape(table.name)}</td>
            <td><a href="/qr/{table.id}" target="_blank"><img src="/qr/{table.id}" alt="QR Code" class="qr-code-img"></a></td>
            <td>{waiter_names}</td>
            <td class="actions">
                <button class="button-sm" onclick='openAssignWaiterModal({table.id}, "{html.escape(table.name)}", {waiters_json}, {assigned_waiter_ids})'>üë§ –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏</button>
                <a href="/admin/tables/delete/{table.id}" onclick="return confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–æ–ª–∏–∫–∞ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è QR –∫–æ–¥—É.');" class="button-sm danger">üóëÔ∏è</a>
            </td>
        </tr>
        """)

    body = ADMIN_TABLES_BODY.format(rows="".join(rows) or "<tr><td colspan='5'>–°—Ç–æ–ª–∏–∫—ñ–≤ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.</td></tr>")
    
    active_classes = {key: "" for key in ["main_active", "orders_active", "clients_active", "products_active", "categories_active", "menu_active", "employees_active", "statuses_active", "reports_active", "settings_active"]}
    active_classes["tables_active"] = "active"
    
    return HTMLResponse(ADMIN_HTML_TEMPLATE.format(title="–°—Ç–æ–ª–∏–∫–∏ —Ç–∞ –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∏", body=body, **active_classes))

@router.post("/admin/tables/add")
async def add_table(
    name: str = Form(...),
    session: AsyncSession = Depends(get_db_session),
    username: str = Depends(check_credentials)
):
    """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Å—Ç–æ–ª–∏–∫."""
    new_table = Table(name=name)
    session.add(new_table)
    await session.commit()
    return RedirectResponse(url="/admin/tables", status_code=303)

@router.get("/admin/tables/delete/{table_id}")
async def delete_table(
    table_id: int,
    session: AsyncSession = Depends(get_db_session),
    username: str = Depends(check_credentials)
):
    """–í–∏–¥–∞–ª—è—î —Å—Ç–æ–ª–∏–∫."""
    table = await session.get(Table, table_id)
    if table:
        await session.delete(table)
        await session.commit()
    return RedirectResponse(url="/admin/tables", status_code=303)

# –ü–û–í–ù–Ü–°–¢–Æ –û–ù–û–í–õ–ï–ù–ò–ô –ï–ù–î–ü–û–Ü–ù–¢
@router.post("/admin/tables/assign_waiter/{table_id}")
async def assign_waiter_to_table(
    table_id: int,
    # –ü—Ä–∏–π–º–∞—î–º–æ —Å–ø–∏—Å–æ–∫ ID –∑ —Ñ–æ—Ä–º–∏
    waiter_ids: Optional[List[int]] = Form(None), 
    session: AsyncSession = Depends(get_db_session),
    username: str = Depends(check_credentials)
):
    """–ü—Ä–∏–∑–Ω–∞—á–∞—î –∫—ñ–ª—å–∫–æ—Ö –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ–ª–∏–∫."""
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ selectinload –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤
    table = await session.get(Table, table_id, options=[selectinload(Table.assigned_waiters)])
    if not table:
        raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∞ –∂–æ–¥–Ω–æ–≥–æ ID (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–Ω—è–ª–∏ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö),
    # `waiter_ids` –±—É–¥–µ None. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –π–æ–≥–æ —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫.
    if waiter_ids is None:
        waiter_ids = []

    # –û—á–∏—â—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫
    table.assigned_waiters.clear()

    if waiter_ids:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID —Ä–æ–ª–µ–π –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤
        waiter_roles_res = await session.execute(select(Role.id).where(Role.can_serve_tables == True))
        waiter_role_ids = waiter_roles_res.scalars().all()
        
        if waiter_role_ids:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–±'—î–∫—Ç–∏ Employee, —è–∫—ñ —î –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞–º–∏
            waiters_res = await session.execute(
                select(Employee).where(
                    Employee.id.in_(waiter_ids),
                    Employee.role_id.in_(waiter_role_ids)
                )
            )
            waiters_to_assign = waiters_res.scalars().all()
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏—Ö –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤ –¥–æ —Å–ø–∏—Å–∫—É
            for waiter in waiters_to_assign:
                table.assigned_waiters.append(waiter)
        
    await session.commit()
    return RedirectResponse(url="/admin/tables", status_code=303)


@router.get("/qr/{table_id}")
async def get_qr_code(request: Request, table_id: int):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î QR-–∫–æ–¥ –¥–ª—è —Å—Ç–æ–ª–∏–∫–∞."""
    base_url = str(request.base_url)
    url = f"{base_url}menu/table/{table_id}"
    
    img = qrcode.make(url)
    buf = io.BytesIO()
    img.save(buf, 'PNG')
    buf.seek(0)
    
    return StreamingResponse(buf, media_type="image/png")
