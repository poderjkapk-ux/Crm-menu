# in_house_menu.py

import html as html_module
import json
import logging
from fastapi import APIRouter, Depends, HTTPException, Request, Body
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import joinedload
from aiogram import Bot, html as aiogram_html
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from models import Table, Product, Category, Order, Settings, Employee, OrderStatusHistory
from dependencies import get_db_session
from templates import IN_HOUSE_MENU_HTML_TEMPLATE

router = APIRouter()
logger = logging.getLogger(__name__)


async def get_admin_bot(session: AsyncSession) -> Bot | None:
    settings = await session.get(Settings, 1)
    if settings and settings.admin_bot_token:
        from aiogram.enums import ParseMode
        from aiogram.client.default import DefaultBotProperties
        return Bot(token=settings.admin_bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    return None

# ... (–∫–æ–¥ –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ call_waiter –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@router.get("/menu/table/{table_id}", response_class=HTMLResponse)
async def get_in_house_menu(table_id: int, request: Request, session: AsyncSession = Depends(get_db_session)):
    table = await session.get(Table, table_id)
    if not table:
        raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    settings = await session.get(Settings, 1)
    logo_html = f'<img src="/{settings.logo_url}" alt="–õ–æ–≥–æ—Ç–∏–ø" class="header-logo">' if settings and settings.logo_url else ''

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é, —è–∫–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ
    categories_res = await session.execute(
        select(Category)
        .where(Category.show_in_restaurant == True)
        .order_by(Category.sort_order, Category.name)
    )
    products_res = await session.execute(
        select(Product)
        .join(Category)
        .where(Product.is_active == True, Category.show_in_restaurant == True)
    )

    categories = [{"id": c.id, "name": c.name} for c in categories_res.scalars().all()]
    products = [{"id": p.id, "name": p.name, "description": p.description, "price": p.price, "image_url": p.image_url, "category_id": p.category_id} for p in products_res.scalars().all()]

    # –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ –º–µ–Ω—é –≤ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ JSON
    menu_data = json.dumps({"categories": categories, "products": products})

    return HTMLResponse(content=IN_HOUSE_MENU_HTML_TEMPLATE.format(
        table_name=html_module.escape(table.name),
        table_id=table.id,
        logo_html=logo_html,
        menu_data=menu_data
    ))

async def notify_waiters_or_admin(
    session: AsyncSession, 
    bot: Bot, 
    table: Table, 
    message_text: str, 
    keyboard=None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º –∏–ª–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç."""
    waiters_on_shift = [w for w in table.assigned_waiters if w.telegram_user_id and w.is_on_shift]
    
    target_chat_ids = []
    
    if waiters_on_shift:
        target_chat_ids.extend([w.telegram_user_id for w in waiters_on_shift])
    else:
        settings = await session.get(Settings, 1)
        if settings and settings.admin_chat_id:
            target_chat_ids.append(settings.admin_chat_id)
            message_text += "\n<i>–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ.</i>"
    
    if not target_chat_ids:
        return False

    for chat_id in target_chat_ids:
        try:
            await bot.send_message(chat_id, message_text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id}: {e}")
            
    return True

@router.post("/api/menu/table/{table_id}/call_waiter", response_class=JSONResponse)
async def call_waiter(table_id: int, session: AsyncSession = Depends(get_db_session)):
    table = await session.get(Table, table_id, options=[joinedload(Table.assigned_waiters).joinedload(Employee.role)])
    if not table: raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    message_text = f"‚ùóÔ∏è <b>–í–∏–∫–ª–∏–∫ –∑—ñ —Å—Ç–æ–ª–∏–∫–∞: {html_module.escape(table.name)}</b>"
    
    admin_bot = await get_admin_bot(session)
    if not admin_bot:
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

    try:
        sent = await notify_waiters_or_admin(session, admin_bot, table, message_text)
        if sent:
            return JSONResponse(content={"message": "–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ."})
        else:
            raise HTTPException(status_code=503, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
    finally:
        await admin_bot.session.close()

@router.post("/api/menu/table/{table_id}/request_bill", response_class=JSONResponse)
async def request_bill(table_id: int, session: AsyncSession = Depends(get_db_session)):
    table = await session.get(Table, table_id, options=[joinedload(Table.assigned_waiters).joinedload(Employee.role)])
    if not table: raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    message_text = f"üí∞ <b>–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑—ñ —Å—Ç–æ–ª–∏–∫–∞: {html_module.escape(table.name)}</b>"
    
    admin_bot = await get_admin_bot(session)
    if not admin_bot:
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

    try:
        sent = await notify_waiters_or_admin(session, admin_bot, table, message_text)
        if sent:
            return JSONResponse(content={"message": "–ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç –Ω–µ–∑–∞–±–∞—Ä–æ–º –ø—ñ–¥—ñ–π–¥–µ –∑ —Ä–∞—Ö—É–Ω–∫–æ–º."})
        else:
            raise HTTPException(status_code=503, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
    finally:
        await admin_bot.session.close()

@router.post("/api/menu/table/{table_id}/place_order", response_class=JSONResponse)
async def place_in_house_order(table_id: int, items: list = Body(...), session: AsyncSession = Depends(get_db_session)):
    table = await session.get(Table, table_id, options=[joinedload(Table.assigned_waiters).joinedload(Employee.role)])
    if not table: raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    if not items: raise HTTPException(status_code=400, detail="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î.")

    total_price = sum(item.get('price', 0) * item.get('quantity', 0) for item in items)
    products_str = ", ".join([f"{item['name']} x {item['quantity']}" for item in items])
    
    order = Order(
        customer_name=f"–°—Ç—ñ–ª: {table.name}", phone_number=f"table_{table.id}",
        address=None, products=products_str, total_price=total_price,
        is_delivery=False, delivery_time="In House", order_type="in_house",
        table_id=table.id, status_id=1
    )
    session.add(order)
    await session.commit()
    await session.refresh(order)
    
    history_entry = OrderStatusHistory(
        order_id=order.id, status_id=order.status_id,
        actor_info=f"–ì—ñ—Å—Ç—å –∑–∞ —Å—Ç–æ–ª–∏–∫–æ–º {table.name}"
    )
    session.add(history_entry)
    await session.commit()

    order_details_text = (f"üìù <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–ª–∏–∫–∞: {aiogram_html.bold(table.name)} (ID: #{order.id})</b>\n\n"
                          f"<b>–°–∫–ª–∞–¥:</b>\n- " + aiogram_html.quote(products_str.replace(", ", "\n- ")) +
                          f"\n\n<b>–°—É–º–∞:</b> {total_price} –≥—Ä–Ω")

    admin_bot = await get_admin_bot(session)
    if not admin_bot:
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º", callback_data=f"waiter_manage_order_{order.id}"))

    try:
        sent = await notify_waiters_or_admin(session, admin_bot, table, order_details_text, kb.as_markup())
        if sent:
            return JSONResponse(content={"message": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç –Ω–µ–∑–∞–±–∞—Ä–æ–º –π–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.", "order_id": order.id})
        else:
             raise HTTPException(status_code=503, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
    finally:
        await admin_bot.session.close()
