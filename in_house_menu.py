# in_house_menu.py

import html as html_module
import json
import logging
from fastapi import APIRouter, Depends, HTTPException, Request, Body
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
# –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ selectinload
from sqlalchemy.orm import joinedload, selectinload
from aiogram import Bot, html as aiogram_html
# NEW: Import keyboard builder
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

# –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ OrderStatusHistory
from models import Table, Product, Category, Order, Settings, Employee, OrderStatusHistory
from dependencies import get_db_session
# –ó–º—ñ–Ω–µ–Ω–æ: —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω –∑ templates.py
from templates import IN_HOUSE_MENU_HTML_TEMPLATE

router = APIRouter()
logger = logging.getLogger(__name__)


async def get_admin_bot(session: AsyncSession) -> Bot | None:
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–¥–º—ñ–Ω-–±–æ—Ç–∞."""
    settings = await session.get(Settings, 1)
    if settings and settings.admin_bot_token:
        from aiogram.enums import ParseMode
        from aiogram.client.default import DefaultBotProperties
        return Bot(token=settings.admin_bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    return None

@router.get("/menu/table/{table_id}", response_class=HTMLResponse)
async def get_in_house_menu(table_id: int, request: Request, session: AsyncSession = Depends(get_db_session)):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞."""
    table = await session.get(Table, table_id)
    if not table:
        raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    settings = await session.get(Settings, 1)
    logo_html = f'<img src="/{settings.logo_url}" alt="–õ–æ–≥–æ—Ç–∏–ø" class="header-logo">' if settings and settings.logo_url else ''
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é, —è–∫–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ
    categories_res = await session.execute(
        select(Category)
        .where(Category.show_in_restaurant == True)
        .order_by(Category.sort_order, Category.name)
    )
    products_res = await session.execute(
        select(Product)
        .join(Category)
        .where(Product.is_active == True, Category.show_in_restaurant == True)
    )

    categories = [{"id": c.id, "name": c.name} for c in categories_res.scalars().all()]
    products = [{"id": p.id, "name": p.name, "description": p.description, "price": p.price, "image_url": p.image_url, "category_id": p.category_id} for p in products_res.scalars().all()]

    # –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ –º–µ–Ω—é –≤ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ JSON
    menu_data = json.dumps({"categories": categories, "products": products})

    return HTMLResponse(content=IN_HOUSE_MENU_HTML_TEMPLATE.format(
        table_name=html_module.escape(table.name),
        table_id=table.id,
        logo_html=logo_html,
        menu_data=menu_data
    ))

@router.post("/api/menu/table/{table_id}/call_waiter", response_class=JSONResponse)
async def call_waiter(table_id: int, session: AsyncSession = Depends(get_db_session)):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–∫–ª–∏–∫ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ –∑—ñ —Å—Ç–æ–ª–∏–∫–∞."""
    # –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ selectinload –¥–ª—è M2M
    table = await session.get(Table, table_id, options=[selectinload(Table.assigned_waiters)])
    if not table: raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    # –ó–ú–Ü–ù–ï–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤
    waiters = table.assigned_waiters
    message_text = f"‚ùóÔ∏è <b>–í–∏–∫–ª–∏–∫ –∑—ñ —Å—Ç–æ–ª–∏–∫–∞: {html_module.escape(table.name)}</b>"
    
    admin_bot = await get_admin_bot(session)
    if not admin_bot:
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

    try:
        # –ó–ú–Ü–ù–ï–ù–û: –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ (M2M)
        target_chat_ids = set()
        for w in waiters:
            if w.telegram_user_id and w.is_on_shift:
                target_chat_ids.add(w.telegram_user_id)

        if not target_chat_ids:
            settings = await session.get(Settings, 1)
            if settings and settings.admin_chat_id:
                try:
                    target_chat_ids.add(int(settings.admin_chat_id))
                    message_text += "\n<i>–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ.</i>"
                except ValueError:
                     logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π admin_chat_id: {settings.admin_chat_id}")
        
        if target_chat_ids:
            for chat_id in target_chat_ids:
                try:
                    await admin_bot.send_message(chat_id, message_text)
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∏–∫–ª–∏–∫ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ –≤ —á–∞—Ç {chat_id}: {e}")
            return JSONResponse(content={"message": "–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ."})
        else:
            raise HTTPException(status_code=503, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
    finally:
        await admin_bot.session.close()

@router.post("/api/menu/table/{table_id}/request_bill", response_class=JSONResponse)
async def request_bill(table_id: int, session: AsyncSession = Depends(get_db_session)):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫ –∑—ñ —Å—Ç–æ–ª–∏–∫–∞."""
    # –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ selectinload –¥–ª—è M2M
    table = await session.get(Table, table_id, options=[selectinload(Table.assigned_waiters)])
    if not table: raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    # –ó–ú–Ü–ù–ï–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤
    waiters = table.assigned_waiters
    message_text = f"üí∞ <b>–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑—ñ —Å—Ç–æ–ª–∏–∫–∞: {html_module.escape(table.name)}</b>"
    
    admin_bot = await get_admin_bot(session)
    if not admin_bot:
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

    try:
        # –ó–ú–Ü–ù–ï–ù–û: –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ (M2M)
        target_chat_ids = set()
        for w in waiters:
            if w.telegram_user_id and w.is_on_shift:
                target_chat_ids.add(w.telegram_user_id)

        if not target_chat_ids:
            settings = await session.get(Settings, 1)
            if settings and settings.admin_chat_id:
                try:
                    target_chat_ids.add(int(settings.admin_chat_id))
                    message_text += "\n<i>–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ.</i>"
                except ValueError:
                     logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π admin_chat_id: {settings.admin_chat_id}")
        
        if target_chat_ids:
            for chat_id in target_chat_ids:
                try:
                    await admin_bot.send_message(chat_id, message_text)
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫ –≤ —á–∞—Ç {chat_id}: {e}")
            return JSONResponse(content={"message": "–ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç –Ω–µ–∑–∞–±–∞—Ä–æ–º –ø—ñ–¥—ñ–π–¥–µ –∑ —Ä–∞—Ö—É–Ω–∫–æ–º."})
        else:
            raise HTTPException(status_code=503, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
    finally:
        await admin_bot.session.close()

@router.post("/api/menu/table/{table_id}/place_order", response_class=JSONResponse)
async def place_in_house_order(table_id: int, items: list = Body(...), session: AsyncSession = Depends(get_db_session)):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–ª–∏–∫–∞."""
    # –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ selectinload –¥–ª—è M2M
    table = await session.get(Table, table_id, options=[selectinload(Table.assigned_waiters)])
    if not table: raise HTTPException(status_code=404, detail="–°—Ç–æ–ª–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    if not items: raise HTTPException(status_code=400, detail="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î.")

    total_price = sum(item.get('price', 0) * item.get('quantity', 0) for item in items)
    products_str = ", ".join([f"{item['name']} x {item['quantity']}" for item in items])
    
    order = Order(
        customer_name=f"–°—Ç—ñ–ª: {table.name}", phone_number=f"table_{table.id}",
        address=None, products=products_str, total_price=total_price,
        is_delivery=False, delivery_time="In House", order_type="in_house",
        table_id=table.id, status_id=1 # –°—Ç–∞—Ç—É—Å "–ù–æ–≤—ã–π"
    )
    session.add(order)
    await session.commit()
    await session.refresh(order)
    
    history_entry = OrderStatusHistory(
        order_id=order.id, status_id=order.status_id,
        actor_info=f"–ì—ñ—Å—Ç—å –∑–∞ —Å—Ç–æ–ª–∏–∫–æ–º {table.name}"
    )
    session.add(history_entry)
    await session.commit()

    order_details_text = (f"üìù <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–ª–∏–∫–∞: {aiogram_html.bold(table.name)} (ID: #{order.id})</b>\n\n"
                          f"<b>–°–∫–ª–∞–¥:</b>\n- " + aiogram_html.quote(products_str.replace(", ", "\n- ")) +
                          f"\n\n<b>–°—É–º–∞:</b> {total_price} –≥—Ä–Ω")

    admin_bot = await get_admin_bot(session)
    if not admin_bot:
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

    # –ó–ú–Ü–ù–ï–ù–û: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤ (–ü—Ä–∏–π–Ω—è—Ç–∏)
    kb_waiter = InlineKeyboardBuilder()
    kb_waiter.row(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"waiter_accept_order_{order.id}"))
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º—ñ–Ω-—á–∞—Ç—É (–ö–µ—Ä—É–≤–∞—Ç–∏)
    kb_admin = InlineKeyboardBuilder()
    kb_admin.row(InlineKeyboardButton(text="‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ (–ê–¥–º—ñ–Ω)", callback_data=f"waiter_manage_order_{order.id}"))


    try:
        waiters = table.assigned_waiters
        settings = await session.get(Settings, 1)
        admin_chat_id = None
        if settings and settings.admin_chat_id:
            try:
                admin_chat_id = int(settings.admin_chat_id)
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π admin_chat_id: {settings.admin_chat_id}")

        
        waiter_chat_ids = set()
        for w in waiters:
            if w.telegram_user_id and w.is_on_shift:
                waiter_chat_ids.add(w.telegram_user_id)

        if waiter_chat_ids:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "–ü—Ä–∏–π–Ω—è—Ç–∏" —É—Å—ñ–º –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞–º —Å—Ç–æ–ª–∏–∫–∞
            for chat_id in waiter_chat_ids:
                try:
                    await admin_bot.send_message(chat_id, order_details_text, reply_markup=kb_waiter.as_markup())
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—É {chat_id}: {e}")
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç (—è–∫—â–æ –≤—ñ–Ω —î —ñ —Ü–µ –Ω–µ –æ–¥–∏–Ω –∑ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤)
            if admin_chat_id and admin_chat_id not in waiter_chat_ids:
                try:
                    await admin_bot.send_message(admin_chat_id, "‚úÖ " + order_details_text, reply_markup=kb_admin.as_markup())
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–ø—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç {admin_chat_id}: {e}")

            return JSONResponse(content={"message": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—Ñ—ñ—Ü—ñ–∞–Ω—Ç –Ω–µ–∑–∞–±–∞—Ä–æ–º –π–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.", "order_id": order.id})
        
        else:
            # –ù–µ–º–∞—î –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤ - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—à–µ –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç
            if admin_chat_id:
                await admin_bot.send_message(
                    admin_chat_id, 
                    f"‚ùóÔ∏è <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤—ñ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞ {aiogram_html.bold(table.name)} (ID: #{order.id})!</b>\n\n" + order_details_text +
                    "\n\n<i>(–ñ–æ–¥–µ–Ω –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç –Ω–µ –±—É–≤ –Ω–∞ –∑–º—ñ–Ω—ñ –∞–±–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ü–µ–π —Å—Ç–æ–ª–∏–∫)</i>",
                    reply_markup=kb_admin.as_markup()
                )
                return JSONResponse(content={"message": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ.", "order_id": order.id})
            else:
                # –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω—ñ–∫–æ–º—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
                logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –∞–Ω—ñ –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—ñ–≤, –∞–Ω—ñ –∞–¥–º—ñ–Ω-—á–∞—Ç—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
                raise HTTPException(status_code=503, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
    finally:
        await admin_bot.session.close()
